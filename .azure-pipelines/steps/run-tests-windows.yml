parameters:
  runIntegrationTests:

steps:
- task: UsePythonVersion@0
  displayName: Use Python $(python.version)
  inputs:
    versionSpec: '$(python.version)'
    architecture: '$(python.architecture)'

- powershell: |
    Invoke-WebRequest -Uri https://go.microsoft.com/fwlink/?linkid=2026036 -OutFile adksetup.exe
    ./adksetup.exe /features OptionId.WindowsPerformanceToolkit /log adk-setup.log /ceip off /installpath "C:\Program Files (x86)\Windows Kits\10\"
    # Wait for install to complete.
    python -c "
    import os, time
    start = time.time()
    last = start
    while last - start < 60:
     if os.path.exists('C:/Program Files (x86)/Windows Kits/10/Windows Performance Toolkit/wpr.exe'):
      break
     print('Waiting...')
     time.sleep(2)
     last = time.time()
    "
    Get-Content adk-setup.log
  displayName: ADK Setup

- bash: pip install --upgrade setuptools tox
  displayName: Install Tox

- script: mkdir traces
  displayName: Make trace output directory

- script:
    tox -e py -- -m unit --junit-xml=junit/unit-test.xml
    --use-wpr
    --wpr-path="C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\wpr.exe"
    --wpr-profile=GeneralProfile.verbose
    --wpr-profile=CPU.verbose
    --wpr-output=traces/wpr-result.etl
  displayName: Tox run unit tests

- script:
    tracerpt -l traces/wpr-result.etl -export traces/providers.man
  displayName: Generate trace provider manifest

- task: PublishBuildArtifacts@1
  displayName: 'Publish trace results'
  inputs:
    pathtoPublish: traces
    artifactName: wpr-result-$(python.version)-$(python.architecture).etl
  condition: succeededOrFailed()

- ${{ if eq(parameters.runIntegrationTests, 'true') }}:
  - powershell: |
      # Fix Git SSL errors
      pip install certifi tox
      python -m certifi > cacert.txt
      $env:GIT_SSL_CAINFO = $(Get-Content cacert.txt)

      # Shorten paths to get under MAX_PATH or else integration tests will fail
      # https://bugs.python.org/issue18199
      subst T: $env:TEMP
      $env:TEMP = "T:\"
      $env:TMP = "T:\"

      tox -e py -- -m integration -n 3 --duration=5 --junit-xml=junit/integration-test.xml
    displayName: Tox run integration tests

- task: PublishTestResults@2
  displayName: Publish Test Results
  inputs:
    testResultsFiles: junit/*.xml
    testRunTitle: 'Python $(python.version)'
  condition: succeededOrFailed()
